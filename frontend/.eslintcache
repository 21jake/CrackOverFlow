[{"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/index.js":"1","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/App.js":"2","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/auth/SignUp.js":"3","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/auth/SignIn.js":"4","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/NavBar.js":"5","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/user/User.js":"6","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostPreview.js":"7","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/vote/Vote.js":"8","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostDetail.js":"9","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/Avatar.js":"10","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/CommentWrapper.js":"11","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/Comment.js":"12","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/Home.js":"13","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/FirstAndLastDaysOfMonth.js":"14","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostCreate.js":"15","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/TopicsDropdown.js":"16","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/api/Axios.js":"17","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/Toast.js":"18","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/checkUserLoggedIn.js":"19","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/returnValueOrEmpty.js":"20","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/DeleteModal.js":"21","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/user/Guess.js":"22"},{"size":436,"mtime":1611140772765,"results":"23","hashOfConfig":"24"},{"size":2286,"mtime":1611591829523,"results":"25","hashOfConfig":"24"},{"size":6182,"mtime":1611203360169,"results":"26","hashOfConfig":"24"},{"size":4634,"mtime":1611203389547,"results":"27","hashOfConfig":"24"},{"size":3390,"mtime":1611149562626,"results":"28","hashOfConfig":"24"},{"size":6472,"mtime":1611227558676,"results":"29","hashOfConfig":"24"},{"size":2450,"mtime":1611555833513,"results":"30","hashOfConfig":"24"},{"size":4652,"mtime":1611229132093,"results":"31","hashOfConfig":"24"},{"size":3467,"mtime":1611555864745,"results":"32","hashOfConfig":"24"},{"size":286,"mtime":1611056789280,"results":"33","hashOfConfig":"24"},{"size":3592,"mtime":1611227434714,"results":"34","hashOfConfig":"24"},{"size":3667,"mtime":1611592165053,"results":"35","hashOfConfig":"24"},{"size":8500,"mtime":1611229108674,"results":"36","hashOfConfig":"24"},{"size":497,"mtime":1611068748421,"results":"37","hashOfConfig":"24"},{"size":4171,"mtime":1611150214799,"results":"38","hashOfConfig":"24"},{"size":1774,"mtime":1611147108196,"results":"39","hashOfConfig":"24"},{"size":449,"mtime":1611133764647,"results":"40","hashOfConfig":"24"},{"size":1307,"mtime":1611131731795,"results":"41","hashOfConfig":"24"},{"size":139,"mtime":1611148914551,"results":"42","hashOfConfig":"24"},{"size":127,"mtime":1611151591782,"results":"43","hashOfConfig":"24"},{"size":1023,"mtime":1611555727025,"results":"44","hashOfConfig":"24"},{"size":6806,"mtime":1611592439192,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"c18rc8",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/index.js",[],["102","103"],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/App.js",["104","105"],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/auth/SignUp.js",["106"],"import React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// import TextField from '@material-ui/core/TextField';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Axios from '../../api/Axios';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { ToastError, ToastSuccess } from '../entities/shared/Toast';\nimport { useAuth } from '../../../App'\nimport { useHistory } from 'react-router-dom';\nimport TopicsDropdown from '../entities/shared/TopicsDropdown';\n\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" to=\"/\">\n        CrackOverFlow\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const { login, user } = useAuth();\n  const classes = useStyles();\n  const history = useHistory();\n  const [topics, setTopics] = useState([]);\n\n\n  useEffect(() => {\n    if (user && user.id) {\n        history.goBack();\n    }\n}, [user])\n\n\n  const saveEntity = async (formData) => {\n    try {\n      // setLoading(true);\n      const res = await Axios.post('/auth/register', formData);\n      // console.log(res,' res');\n      if (res && res.data.success) {\n        ToastSuccess(res.data.message);\n        // localStorage.setItem('crackToken', res.data.token.token)\n        login(res.data.user, res.data.token.token);\n        return history.push('/')\n        // return <Redirect to='/' />\n\n      } else {\n        ToastError(res.data.message);\n      }\n    } catch (error) {\n      console.log(error)\n      // ToastError('Đã có lỗi xảy ra, vui lòng thử lại');\n    }\n  }\n\n\n  const register = (event, errors, value) => {\n\n    if (!errors.length) {\n      value.topics = topics;\n      saveEntity(value);\n    }\n  }\n\n  const onTopicsChange = (e) => {\n    if (e) {\n      const output = e.map(element => element.value);\n      setTopics(output);\n    } else {\n      setTopics([]);\n    }\n  }\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          {/* <LockOutlinedIcon /> */}\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Đăng ký\n        </Typography>\n        <AvForm onSubmit={register}>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <AvField\n                name=\"fname\"\n                id=\"fname\"\n                type=\"text\"\n                label=\"Tên\"\n                autoFocus\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập tên' },\n                  maxLength: { value: 10, errorMessage: 'Tên không quá 10 ký tự' }\n                }}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <AvField\n                name=\"lname\"\n                id=\"lname\"\n                label=\"Họ\"\n                type=\"text\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập họ' },\n                  maxLength: { value: 10, errorMessage: 'Họ không quá 10 ký tự' },\n                }}\n              />\n\n            </Grid>\n            <Grid item xs={12}>\n              <TopicsDropdown \n              onTopicsChange={onTopicsChange}\n              isMultiple={true}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AvField\n                name=\"email\"\n                id=\"email\"\n                label=\"Email\"\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập email' },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AvField\n                name=\"phone\"\n                id=\"phone\"\n                label=\"Số điện thoại\"\n                type=\"number\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập số điện thoại' },\n                  pattern: {\n                    value: /^0[1-9][0-9]{8}$/,\n                    errorMessage: 'Số điện thoại không đúng định dạng'\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AvField\n                name=\"password\"\n                id=\"password\"\n                label=\"Mật khẩu\"\n                type=\"number\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập mật khẩu' },\n                }}\n              />\n            </Grid>\n            <Button\n              type=\"submit\"\n              // onClick={register}\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Đăng ký\n          </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item>\n                <Link to=\"/login\" variant=\"body2\" >\n                  Đăng nhập bằng tài khoản\n              </Link>\n              </Grid>\n            </Grid>\n          </Grid>\n        </AvForm>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/auth/SignIn.js",["107"],"import React, {useEffect} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// import TextField from '@material-ui/core/TextField';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Link from '@material-ui/core/Link';\nimport { Link, useHistory } from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Axios from '../../api/Axios';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { ToastSuccess, ToastError } from '../entities/shared/Toast';\nimport {useAuth} from '../../../App'\n\n\nfunction Copyright() {\n\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" to=\"/\">\n        CrackOverFlow\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n  const {login, user} = useAuth();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (user && user.id) {\n      history.goBack();\n    }\n}, [user])\n\n\n  const signIn = async (event, errors, value) => {\n    event.preventDefault();\n    if (!errors.length) {\n      try {\n        // setLoading(true);\n        const res = await Axios.post('/auth/login', value);\n        // return;\n        if (res && res.data.success) {\n          ToastSuccess(res.data.message);\n          login(res.data.user, res.data.token.token);\n          return history.push('/')\n        } else {\n          ToastError(res.data.message);\n        }      \n      } catch (error) {\n        console.log(error)\n        // ToastError('Đã có lỗi xảy ra, vui lòng thử lại');\n      }\n    }\n  }\n\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Đăng nhập\n          </Typography>\n          <AvForm onSubmit={signIn}>\n            <Grid item xs={12}>\n              <AvField\n                name=\"email\"\n                id=\"email\"\n                label=\"Email\"\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập email' },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <AvField\n                name=\"password\"\n                id=\"passwprd\"\n                label=\"Mật khẩu\"\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: 'Vui lòng nhập mật khẩu' },\n                }}\n              />\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Đăng nhập\n            </Button>\n          </AvForm>\n\n\n          <Grid container>\n            <Grid item>\n              <Link to=\"/register\" variant=\"body2\">\n                {\"Chưa có tài khoản? Đăng ký ngay\"}\n              </Link>\n            </Grid>\n          </Grid>\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/NavBar.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/user/User.js",["108","109","110","111"],"import React, { useEffect, useState } from 'react';\nimport { Col, Row, Container } from 'reactstrap';\nimport PostPreview from '../post/PostPreview';\nimport { useAuth } from '../../../../App'\nimport { useHistory } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Axios from '../../../api/Axios';\nimport { ToastError } from '../shared/Toast'\nimport moment from 'moment';\nimport Comment from '../comment/Comment'\n\nconst User = () => {\n    const { user } = useAuth();\n    const history = useHistory();\n    const [totalCredit, setTotalCredit] = useState(0)\n\n    useEffect(() => {\n        if (!user || !user.id) {\n            history.push('/register');\n        }\n    }, [user])\n\n    const [totalPage, setTotalPage] = useState(1);\n    const [posts, setPosts] = useState([]);\n    const [comments, setComments] = useState([]);\n    const [paginationState, setPaginationState] = useState({\n        currentPage: 1,\n        itemsPerPage: 10\n    });\n\n    const getPosts = async () => {\n        try {\n            const res = await Axios.get(`/posts/user/${user?.id}?page=${paginationState.currentPage}`);\n            if (res.status === 200) {\n                // console.log(res.data.data.posts.total , 'res.res.data.data.total.data.posts)');\n                setPosts(res.data.data.posts.data);\n                const total = Math.ceil(res.data.data.posts.total / paginationState.itemsPerPage);\n                setTotalPage(total);\n                setTotalCredit(parseInt(res.data.data.totalCredit));\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            // console.log(error);\n        }\n    }\n\n    const getComments = async () => {\n        try {\n            const res = await Axios.get(`/comments/user/${user?.id}`);\n            if (res.status === 200) {\n                // console.log(res, 'res')\n                if (res.data.data.data.length) {\n                    setComments(res.data.data.data);\n                } else {\n                    setComments([]);\n                }\n\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    useEffect(() => {\n        if (user) {\n            getComments();\n        }\n    }, [user])\n\n    // console.log(posts, 'post')\n\n    const handlePaginationChange = (event, value) => {\n        setPaginationState({ ...paginationState, currentPage: value })\n    }\n\n    useEffect(() => {\n        getPosts();\n    }, [JSON.stringify(paginationState)]);\n\n    // console.log(user, 'user')\n    return (\n        <Container className=\"themed-container p-5\">\n            <Row>\n                <Col xs=\"8\">\n                    <Row>\n                        <Col xs=\"12\" >\n                            <span className=\"lead\">\n                                Thông tin người dùng\n                            </span>\n                        </Col>\n                        <Col xs=\"6\">\n                            <div className=\"font-weight-bold\">Họ tên: </div>\n                            <div className=\"font-weight-bold\">Email: </div>\n                            <div className=\"font-weight-bold\">Ngày tạo tài khoản: </div>\n\n                        </Col>\n                        <Col xs=\"6\">\n                            <div>{user?.fname} {user?.lname} </div>\n                            <div>{user?.email}</div>\n                            <div>\n                                {moment(user?.created_at).format('DD/M/YYYY, h:mm')}\n                            </div>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col xs=\"4\">\n                    <div className=\"text-center border border-secondary rounded h-100 d-flex\">\n                        <h2 className=\"m-auto text-primary\">\n                            CREDIT: {totalCredit}\n                    </h2>\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mt-5\">\n                <Col xs=\"7\">\n                    <Row>\n                        <Col xs=\"12\" >\n                            <span className=\"lead\">\n                                Các bài đăng gần đây\n                        </span>\n                        </Col>\n                        <Col xs=\"12\" className=\"m-3\">\n                            <div className=\"border border-secondary rounded m-3\">\n                                {\n                                    posts?.length ? posts.map(e => (\n                                        <PostPreview\n                                            key={e.id}\n                                            post={e}\n                                            hideVote={true}\n                                        />\n                                    )) : <p className=\"text-center m-3\"> Không có bài đăng nào </p>\n                                }\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row className={posts?.length ? \"justify-content-center\" : \"d-none\"}>\n                        <Pagination count={totalPage} variant=\"outlined\"\n                            onChange={handlePaginationChange}\n                            shape=\"rounded\" />\n                    </Row>\n                </Col>\n                <Col xs=\"5\">\n                    <Row>\n                        <Col xs=\"12\" >\n                            <span className=\"lead\">\n                                Các bình luận gần đây\n                        </span>\n                        </Col>\n                        <Col xs=\"12\" className=\"m-3\">\n                            <div className=\"border border-secondary rounded m-3\">\n                                {comments?.length ?\n                                    comments.map(e => \n                                        <Comment \n                                        key={e.id}\n                                        clickDisplayPost={true}\n                                        isShort={true} entity={e} />\n                                    )\n                                    : <p className=\"text-center m-3\"> Không có bình luận nào </p>\n                                }\n                            </div>\n\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\nexport default User;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostPreview.js",["112","113","114"],"import React, { useEffect, useState } from 'react';\nimport Vote from '../vote/Vote'\nimport { Col, Row, Label, Badge } from 'reactstrap';\nimport PostDetail from './PostDetail';\nimport { returnValueOrEmpty } from '../shared/returnValueOrEmpty';\nimport moment from 'moment';\nimport Axios from '../../../api/Axios';\nimport { ToastError } from '../shared/Toast'\nimport { propTypes } from 'react-bootstrap/esm/Image';\n// import { useEffect, useState, useRef } from 'react';\n\nconst PostPreview = ({ post, hideVote }) => {\n\n    const [entity, setEntity] = useState(null);\n\n    const getPostById = async () => {\n\n        try {\n            const res = await Axios.get(`/posts/detail/${post?.id}`);\n            if (res.status === 200) {\n                setEntity(res.data.data);\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const [postDetailModal, setPostDetailModal] = useState(false);\n    const toggleDetailModal = () => setPostDetailModal(!postDetailModal);\n    const detailModalVisible = () => {\n        getPostById();\n        setPostDetailModal(!postDetailModal);\n    };\n\n    return (\n        <Col xs=\"12\" className=\"p-3\">\n            <Row>\n                <Col xs=\"2\" className=\" m-auto\">\n                    <Vote\n                        hideVote={hideVote}\n                        totalVote={post?.post_votes}\n                        postId={post?.id}\n                    />\n                </Col>\n                <Col xs=\"10\" onClick={() => detailModalVisible()}>\n                    <p className=\"font-weight-bold\">\n                        {returnValueOrEmpty(post?.title)}\n                    </p>\n                    <p className=\"ellipsisText\">\n                        {returnValueOrEmpty(post?.content)}\n                    </p>\n                </Col>\n                <Col xs=\"10\" className=\"ml-auto d-flex justify-content-between\">\n                    <Badge color=\"primary\">Chủ đề 1</Badge>\n                    <small className=\"font-italic \">\n                        {moment(returnValueOrEmpty(post?.created_at)).format('DD/M/YYYY, h:mm')}\n                    </small>\n                </Col>\n            </Row>\n            <PostDetail\n                post={entity}\n                modal={postDetailModal}\n                toggle={() => toggleDetailModal()}\n            />\n        </Col>\n\n\n\n    )\n}\n\nexport default PostPreview;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/vote/Vote.js",["115","116"],"import { Col, Row } from 'reactstrap';\n// import { FontAwesomeIcon } from '@fontawesome/react-fontawesome'\n// import { FontAwesomeIcon } from '@fortawesome/free-solid-svg-icons'\nimport { faCaretDown, faCaretUp, faPray } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useAuth } from '../../../../App';\n// import { useHistory } from 'react-router-dom';\n// import { ToastError } from '../shared/Toast'\nimport { useEffect, useState } from 'react';\nimport { Button } from 'reactstrap'\nimport Axios from '../../../api/Axios';\nimport { ToastError } from '../shared/Toast';\nconst Vote = ({ totalVote, postId, hideVote }) => {\n    const [stateTotalVote, setStateTotalVote] = useState(0);\n    const [userAction, setUserAction] = useState(null);\n    const [haveUserVotedThisTurn, setHaveUserVotedThisTurn] = useState(false);\n\n\n\n    const { user } = useAuth();\n    // console.log(totalVote);\n\n    // console.log(user);\n\n    const returnTotalVotes = (post_votes) => {\n        if (post_votes && post_votes.length) {\n            const total = post_votes.map(e => e.type).reduce((a, b) => a + b, 0)\n            return total\n        } else {\n            return 0;\n        }\n    }\n\n    // console.log(postId, 'postId');\n    // console.log(user, 'user');\n\n    const checkIfUserVotedThisPost = () => {\n        const voteInstance = totalVote?.find(e => e.user_id === user?.id);\n        if (!voteInstance) {\n            return false;\n        }\n        return voteInstance.type === 1 ? \"UPVOTE\" : \"DOWNVOTE\"\n\n    }\n\n    const callVoteAPI = async (voteType) => {\n        const type = voteType === \"UPVOTE\" ? 1 : -1;\n        const data = {\n            post_id: postId,\n            user_id: user.id,\n            type: type,\n        }\n        Axios.post('vote/post', data);\n    }\n\n    const handleVoting = (voteType) => {\n        if (!user || !user.id) {\n            ToastError('Cần đăng nhập trước khi vote');\n            return;\n        }\n        setUserAction(voteType)\n        callVoteAPI(voteType);\n        // votePostAPI(voteType)\n        // console.log(voteType)\n        console.log(user,'user');\n        console.log(postId,'postId');\n\n        setHaveUserVotedThisTurn(true);\n\n\n        if (!checkIfUserVotedThisPost()) {\n            if (haveUserVotedThisTurn) {\n                setStateTotalVote(voteType === \"UPVOTE\" ? stateTotalVote + 2 : stateTotalVote - 2);\n            } else {\n                setStateTotalVote(voteType === \"UPVOTE\" ? stateTotalVote + 1 : stateTotalVote - 1);\n            }\n        } else if (checkIfUserVotedThisPost() === \"UPVOTE\") {\n            \n            setStateTotalVote(voteType === \"UPVOTE\" ? stateTotalVote + 2 : stateTotalVote - 2);\n        } else if (checkIfUserVotedThisPost() === \"DOWNVOTE\") {\n            setStateTotalVote(voteType === \"UPVOTE\" ? stateTotalVote + 2 : stateTotalVote  -2);\n        }\n\n    }\n\n    useEffect(() => {\n        const output = returnTotalVotes(totalVote);\n        setStateTotalVote(output)\n    }, [totalVote])\n\n    useEffect(() => {\n        if (user && totalVote && postId) {\n            if (!checkIfUserVotedThisPost()) {\n                return;\n            }\n            setUserAction(checkIfUserVotedThisPost());\n        }\n    }, [user, totalVote, postId])\n\n    // console.log(checkIfUserVotedThisPost());\n\n    // console.log(userAction, 'userActioc')\n\n\n\n    // console.log(totalVote, 'totalVote')\n\n\n\n    return (\n        <Row className=\"text-center\">\n            <Col xs=\"12\" >\n                <Button color=\"transparent\"\n                    disabled={userAction === \"UPVOTE\"}\n                    onClick={() => handleVoting('UPVOTE')}\n                    // className={hideVote ? \"d-none\" : \"\" }\n                >\n                    <FontAwesomeIcon\n                        color={userAction === \"UPVOTE\" ? 'orange' : ''}\n                        icon={faCaretUp}\n                        size=\"lg\" />\n                </Button>\n\n            </Col>\n            <Col className=\"text-center\">\n                {/* {returnTotalVotes(totalVote)} */}\n                {stateTotalVote}\n            </Col>\n            <Col xs=\"12\">\n                <Button color=\"transparent\"\n                    disabled={userAction === \"DOWNVOTE\"}\n                    // className={hideVote ? \"d-none\" : \"\" }\n                    onClick={() => handleVoting('DOWNVOTE')}>\n                    <FontAwesomeIcon\n                        color={userAction === \"DOWNVOTE\" ? 'orange' : ''}\n                        icon={faCaretDown}\n                        size=\"lg\" />\n                </Button>\n            </Col>\n        </Row>\n    )\n}\nexport default Vote;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostDetail.js",["117"],"import React, { useEffect, useState } from 'react';\nimport Vote from '../vote/Vote'\nimport { Col, Row, Modal, Badge, Button } from 'reactstrap';\n// import PostPreview from './PostPreview';\nimport CommentWrapper from '../comment/CommentWrapper'\nimport { returnValueOrEmpty } from '../shared/returnValueOrEmpty';\nimport moment from 'moment'; \nimport { useAuth } from '../../../../App';\nimport DeleteModal from '../shared/DeleteModal';\n\n\nimport Axios from '../../../api/Axios';\nimport { ToastError } from '../shared/Toast'\n// import { useEffect, useState, useRef } from 'react';\n\n\nconst PostDetail = (props) => {\n    const { post } = props;\n    const [comments, setComments] = useState([]);\n    const { user } = useAuth();\n    const [deleteModal, setDeleteModal] = useState(false);\n\n\n    const toggleDeleteModal = () => setDeleteModal(!deleteModal);\n    const deleteModalVisible = () => {\n        setDeleteModal(!deleteModal);\n    };\n\n    \n\n    useEffect(() => {\n        if (post?.comments?.length) {\n            setComments(post.comments)\n        }\n    }, [post?.comments])\n\n\n    const handleDeletePost = async () => {\n        try {\n            const res = await Axios.delete(`/posts/delete/${post.id}`);\n            if (res.status === 200) {\n                // setPostEntity(res.data.data);\n                setDeleteModal(false);\n                props.toggle();\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n\n    console.log(post, 'post');\n    return (\n        <Modal className=\"m-3\" isOpen={props.modal} toggle={() => props.toggle()} className=\"postDetailModal\">\n            <DeleteModal\n                toggle={toggleDeleteModal}\n                modal={deleteModal}\n                prompt=\"Xác nhận xoá bài đăng này?\"\n                handleComfirm={handleDeletePost}\n            />\n\n            <Col xs=\"12\" className=\"p-3\">\n                <Row>\n                    <Col xs=\"2\" className={post?.user_id === user?.id ? \"ml-auto\" : \"d-none\" }>\n                        <Button color=\"danger\" onClick={() => deleteModalVisible()}>\n                            Xoá bài\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"1\" className=\"m-auto mt-3\">\n                        <Vote\n                            totalVote={post?.post_votes}\n                            postId={post?.id}\n                        />\n                    </Col>\n                    <Col xs=\"11\" className=\"mt-5\">\n                        <p className=\"font-weight-bold\">\n                            {post?.title}\n                        </p>\n                        <p >\n                            {returnValueOrEmpty(post?.content)}\n                        </p>\n                    </Col>\n                    <Col xs=\"11\" className=\"ml-auto d-flex justify-content-between\">\n                        <Badge color=\"primary\">Chủ đề 1</Badge>\n                        <small className=\"font-italic \">\n                            {moment(returnValueOrEmpty(post?.created_at)).format('DD/M/YYYY, h:mm')}\n                        </small>\n                    </Col>\n                </Row>\n            </Col>\n            <Col xs=\"10\" className=\"ml-auto\">\n                <CommentWrapper comments={comments} postId={post?.id} />\n            </Col>\n        </Modal>\n    )\n}\n\nexport default PostDetail;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/Avatar.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/CommentWrapper.js",["118"],"import React, { useEffect, useState, useRef } from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { deepOrange, deepPurple } from '@material-ui/core/colors';\nimport { Row, Col, Button } from 'reactstrap';\nimport { AvGroup, AvInput, AvFeedback, AvForm } from 'availity-reactstrap-validation';\nimport Comment from './Comment';\nimport Axios from '../../../api/Axios';\nimport { ToastError } from '../../entities/shared/Toast'\nimport {useAuth} from \"../../../../App\";\n\nconst CommentWrapper = (props) => {\n    const { postId } = props;\n    const [comments, setComments] = useState([]);\n    const formRef = useRef();\n    const {user} = useAuth();\n\n    const getComments = async () => {\n        try {\n            const res = await Axios.get(`/comments/post/${postId}`);\n            if (res.status === 200) {\n                // console.log(res, 'res')\n                if (res.data.data.length) {\n                    setComments(res.data.data);\n                } else {\n                    setComments([]);\n                }\n\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    useEffect(() => {\n        if (postId) {\n            getComments();\n        }\n    }, [postId])\n\n    const submitComment = async (data) => {\n        try {\n            const res = await Axios.post('comments/create', data);\n            if (res.status === 200) {\n                console.log(res, 'res');\n                setComments([...comments, res.data.data]);\n                formRef.current.reset();\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleSubmitComment = (event, errors, value) => {\n        if (!errors.length) {\n            value.post_id = postId;\n            value.user_id = user.id;\n            value.parent_comment_id = null;\n            console.log(value, 'value');\n            submitComment(value);\n        }\n    }\n\n\n    return (\n        <Row className=\"p-3 m-3\">\n            {\n                comments.length ? (\n                    comments.map(e => (\n                        <Comment \n                            clickDisplayPost={false}\n                            key={e.id}\n                            entity= {e}\n                            isShort={false}\n                        />\n                    ))\n                ): (\n                    <p>Trở thành người đầu tiên bình luận bài đăng này</p>\n                )\n            }\n\n            {/* <Comment /> */}\n\n            <Col xs=\"11\" className=\"ml-auto mt-3\">\n                <AvForm style={{ width: '100%' }} ref={formRef} onSubmit={handleSubmitComment}>\n                    <AvGroup>\n                        <AvInput\n                            type=\"textarea\"\n                            name=\"content\"\n                            placeholder=\"Trả lời bài đăng\"\n                            required\n                        />\n                        <AvFeedback>Nhập bình luận trước khi gửi</AvFeedback>\n                    </AvGroup>\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end' }}>\n                        <Button type=\"submit\" className=\"replyButton\" color=\"primary\">\n                            <span>Gửi bình luận</span>\n                        </Button>\n                    </div>\n                </AvForm>\n            </Col>\n\n        </Row>\n    )\n}\n\nexport default CommentWrapper;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/comment/Comment.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/Home.js",["119","120"],"import React, { useEffect, useState } from 'react';\nimport { Col, Row, Container, Label, Button, Input } from 'reactstrap';\nimport PostPreview from '../component/entities/post/PostPreview'\nimport { InputAdornment, TextField, Tab, Tabs, Typography, withStyles } from '@material-ui/core';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { startingDay, finalDay } from './entities/shared/FirstAndLastDaysOfMonth'\nimport Pagination from '@material-ui/lab/Pagination';\nimport TopicsDropdown from '../component/entities/shared/TopicsDropdown'\nimport Axios from '../api/Axios';\nimport { ToastError } from '../component/entities/shared/Toast'\n\nconst Home = () => {\n    const [tabStatus, setTabStatus] = useState('ALL');\n    const [totalPage, setTotalPage] = useState(1);\n    const [posts, setPosts] = useState([]);\n    const [paginationState, setPaginationState] = useState({\n        currentPage: 1,\n        itemsPerPage: 10\n    });\n\n\n    const getPosts = async () => {\n        try {\n            const res = await Axios.get(`/posts?page=${paginationState.currentPage}`);\n            if (res.status === 200) {\n                // console.log(res, 'res');\n                setPosts(res.data.data.data);\n                const total = Math.ceil(res.data.data.total / paginationState.itemsPerPage);\n                setTotalPage(total);\n            } else {\n                ToastError(res.data.message)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n    useEffect(() => {\n        getPosts();\n    }, [JSON.stringify(paginationState)]);\n\n    const handleTabChange = (event, newValue) => {\n        setTabStatus(newValue);\n    };\n\n    const AntTabs = withStyles({\n        root: {\n            borderBottom: '1px solid #e8e8e8'\n        },\n        indicator: {\n            backgroundColor: '#585F7F'\n        }\n    })(Tabs);\n    const AntTab = withStyles(theme => ({\n        root: {\n            textTransform: 'none',\n            minWidth: 72,\n            fontWeight: theme.typography.fontWeightRegular,\n            marginRight: theme.spacing(4),\n            fontFamily: [\n                '-apple-system',\n                'BlinkMacSystemFont',\n                '\"Segoe UI\"',\n                'Roboto',\n                '\"Helvetica Neue\"',\n                'Arial',\n                'sans-serif',\n                '\"Apple Color Emoji\"',\n                '\"Segoe UI Emoji\"',\n                '\"Segoe UI Symbol\"'\n            ].join(','),\n            '&:hover': {\n                color: '#007bff',\n                opacity: 1\n            },\n            '&$selected': {\n                color: '#007bff',\n                fontWeight: '500'\n            },\n            '&:focus': {\n                color: '#007bff'\n            }\n        },\n        selected: {}\n    }))((property) => <Tab disableRipple {...property} />);\n\n\n    const onTopicsChange = (e) => {\n        console.log(e)\n    }\n    const handlePaginationChange = (event, value) => {\n        setPaginationState({...paginationState, currentPage: value})\n    }\n\n\n    return (\n        <Container fluid className=\"mt-3\">\n            <Row>\n                <Col xs=\"12\">\n                    <Row className=\"home_filterSection justify-content-center\">\n                        <Col>\n                            <TopicsDropdown\n                                onTopicsChange={onTopicsChange}\n                                isMultiple={false}\n                            />\n                        </Col>\n                        <Col>\n                            <Label>\n                                <span>Tìm kiếm theo nội dung</span>\n                            </Label>\n\n                            <TextField\n                                className=\"search-field\"\n                                id=\"input-with-icon-textfield\"\n                                variant=\"outlined\"\n                                size=\"small\"\n                                // value={keyword}\n                                placeholder=\"Nhập từ khoá\"\n                                // onChange={handleSearchBarInput}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <FontAwesomeIcon icon={faSearch} size=\"lg\" />\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </Col>\n                        <Col >\n                            <Label for=\"startDate\">\n                                <span>Thời gian từ ngày</span>\n                            </Label>\n                            <Input\n                                type=\"date\"\n                                name=\"date\"\n                                id=\"startDate\"\n                                className=\"datePicker\"\n                                placeholder=\"date placeholder\"\n                                defaultValue={startingDay()}\n                            // max={props.selectedAdvanceSearch.maxDate}\n                            // onChange={e => handleCheckMinDate(e.currentTarget.value)}\n                            />\n                        </Col>\n                        <Col>\n                            <Label for=\"endDate\">\n                                <span>Đến ngày</span>\n                            </Label>\n                            <Input\n                                type=\"date\"\n                                name=\"date\"\n                                id=\"endDate\"\n                                className=\"datePicker\"\n                                placeholder=\"date placeholder\"\n                                defaultValue={finalDay()}\n                            // min={props.selectedAdvanceSearch.minDate}\n                            // onChange={e => handleCheckMaxDate(e.currentTarget.value)}\n                            />\n                        </Col>\n                        <Col className=\"d-flex\">\n                            <Button color=\"primary\" className=\"mt-auto\">Tìm kiếm</Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        <AntTabs\n                            value={tabStatus}\n                            onChange={handleTabChange}\n                            aria-label=\"ant example\">\n                            <AntTab value=\"INTERESTED\" label={'Chủ đề quan tâm'} />\n                            <AntTab value=\"ALL\" label={'Tất cả chủ đề'} />\n                        </AntTabs>\n                        <Typography />\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"p-3\">\n                <Col xs=\"9\">\n                    <Row className=\"mt-3 home_postSection\">\n                        {\n                            posts.length ? posts.map(e => (\n                                <PostPreview \n                                    hideVote={true}\n                                    key={e.id}\n                                    post={e}\n                                    // postId={e.id}\n                                />\n                            )) : (\"Không tìm thấy bài đăng nào\")\n                        }\n                    </Row>\n\n                    <Row className=\"justify-content-center\">\n                        <Pagination count={totalPage} variant=\"outlined\" \n                             onChange={handlePaginationChange}\n                            shape=\"rounded\" />\n                    </Row>\n                </Col>\n                <Col xs=\"3\">\n                    {/* Ads and recruitment section */}\n                    <Row>\n                        <Col xs=\"12\" className=\"border p-3\">\n                            <div className=\"text-center\">\n                                <span className=\"lead\">Bài đăng nổi bật trong ngày</span>\n                            </div>\n                            <div className=\"home_hotPosts\">\n                                {/* <PostPreview />\n                                <PostPreview /> */}\n                            </div>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Home;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/FirstAndLastDaysOfMonth.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/post/PostCreate.js",["121"],"import { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { useEffect, useState, useRef } from 'react';\nimport { Row, Col, Button, Modal, Container } from 'reactstrap';\nimport TopicsDropdown from '../shared/TopicsDropdown'\nimport { ToastSuccess, ToastError } from '../shared/Toast'\nimport { checkUserLoggedIn } from '../shared/checkUserLoggedIn';\nimport Axios from '../../../api/Axios';\nimport { useAuth } from '../../../../App';\nimport { useHistory } from 'react-router-dom';\n\nconst PostCreate = (props) => {\n    const [topic, setTopic] = useState(null);\n    const { user } = useAuth();\n    const history = useHistory();\n    const formRef = useRef();\n\n\n    useEffect(() => {\n        if (props.modal) {\n            if (!checkUserLoggedIn(user)) {\n                return history.push('login');\n            }\n        }\n    }, [props.modal])\n\n\n    const onTopicsChange = (e) => {\n        setTopic(e.value);\n    }\n\n    const clearForm = () => {\n        formRef.current.reset();\n    }\n\n    const submitPost = async (data) => {\n        try {\n            const res = await Axios.post('/posts/create', data);\n            if (res.status === 200) {\n                ToastSuccess(res.data.message);\n                props.toggle();\n                clearForm();\n            } else {\n                ToastError(res.data.message);\n            }\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    const onFormSubmit = (event, errors, value) => {\n        if (!errors.length) {\n            if (!topic) {\n                ToastError('Vui lòng chọn chủ đề cho bài đăng')\n            } else {\n                value.topic_id = topic;\n                value.user_id = user.id;\n                submitPost(value);\n            }\n        }\n    }\n\n\n    return (\n        <Modal isOpen={props.modal} toggle={() => props.toggle()} className=\"postDetailModal\" >\n            <Container className=\"p-5\">\n                <Row className=\"m-3\">\n                    <Col xs=\"12\" className=\"text-center\">\n                        <h3 className=\"lead\">Tạo bài đăng mới</h3>\n                    </Col>\n                    <Col xs=\"12\">\n                        <TopicsDropdown\n                            onTopicsChange={onTopicsChange}\n                            isMultiple={false}\n                        />\n                    </Col>\n                </Row>\n                {/* chứa ít nhất 10 ký tự */}\n                <Row className=\"m-3\">\n                    <Col xs=\"12\">\n                        <AvForm onSubmit={onFormSubmit} ref={formRef}>\n                            <AvField name=\"title\" label=\"Tiêu đề\"\n                                validate={{\n                                    required: { value: true, errorMessage: 'Vui lòng nhập tiêu đề bài đăng' },\n                                    minLength: { value: 10, errorMessage: 'Tiêu đề bài đăng chứa ít nhất 10 ký tự' },\n                                    maxLength: { value: 255, errorMessage: 'Tiêu đề bài đăng chứa không quá 255 ký tự' },\n                                }}\n                            />\n                            <AvField name=\"content\" label=\"Nội dung\" type=\"textarea\"\n                                className=\"post_textAreaContent\"\n                                validate={{\n                                    required: { value: true, errorMessage: 'Vui lòng nhập nội dung bài đăng' },\n                                    minLength: { value: 10, errorMessage: 'Nội dung bài đăng chứa ít nhất 10 ký tự' },\n                                }}\n                            />\n\n                            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end' }}>\n                                <Button type=\"submit\" className=\"replyButton\" color=\"primary\">\n                                    <span>Tạo bài đăng</span>\n                                </Button>\n                            </div>\n                        </AvForm>\n                    </Col>\n                </Row>\n\n            </Container>\n        </Modal>\n    )\n}\n\nexport default PostCreate;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/TopicsDropdown.js",["122","123","124"],"import Select from 'react-select';\nimport { Row, Label } from 'reactstrap';\nimport Axios from '../../../api/Axios'\nimport { useStyles, useEffect, useState } from 'react';\n\n\nconst TopicsDropdown = (props) => {\n    const [topics, setTopics] = useState([{value: \"\", label: \"\"}]);\n    const convertRawTopicData = (input) => {\n        const output = input.map((e) => (\n          {\n              value: e.id,\n              label: e.name\n          }  \n        ))\n        return output;\n    }\n\n    const getAllTopics = async () => {\n        try {\n            const res = await Axios.get('/topics/getAll');\n            if (res.status === 200) {\n                const output = convertRawTopicData(res.data.data);\n                setTopics(output);\n            } \n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getAllTopics();\n    }, []);\n\n\n    // const options = [\n    //     { value: 'chocolate', label: 'Chocolate' },\n    //     { value: 'strawberry', label: 'Strawberry' },\n    //     { value: 'vanilla', label: 'Vanilla' }\n    // ]\n    const customStyles = {\n        control: styles => ({\n            ...styles,\n            // width: '300px'\n\n        }),\n        option: styles => ({\n            ...styles,\n\n        }),\n        menu: styles => ({\n            ...styles,\n            // width: '200px'\n        })\n\n    };\n\n    return (\n        <>\n            <Label>\n                <span>Chọn chủ đề</span>\n            </Label>\n            <Select \n                onChange={props.onTopicsChange}\n                options={topics}\n                isMulti={props.isMultiple}\n                placeholder=\"Danh sách chủ đề\"\n                styles={customStyles} />\n        </>\n    )\n}\n\nexport default TopicsDropdown;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/api/Axios.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/Toast.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/checkUserLoggedIn.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/returnValueOrEmpty.js",[],"/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/shared/DeleteModal.js",["125"],"import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\n\n\nconst DeleteModal = (props) => {\n    const  { prompt, handleComfirm } = props;\n    // console.log(post, 'post');\n    return (\n        <Modal className=\"m-3\" isOpen={props.modal} toggle={() => props.toggle()} className=\"deleteModal\">\n            <ModalHeader toggle={() => props.toggle()}>\n                <span>Xác nhận xóa</span>\n            </ModalHeader>\n            <ModalBody className=\"text-left\">\n                <span>{prompt}</span>\n            </ModalBody>\n            <ModalFooter>\n                <Button style={{ backgroundColor: '#ffffff', border: '1px solid #666666', color: '#666666' }}\n                    onClick={() => props.toggle()}>\n                    <span>Hủy</span>\n                </Button>\n                <Button color=\"danger\" onClick={() => handleComfirm()}>\n                    <span>Xóa</span>\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nexport default DeleteModal;","/Users/jake21/Documents/Code/projects/CrackOverFlow/frontend/src/main/component/entities/user/Guess.js",["126","127","128","129","130"],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":10,"column":58,"nodeType":"137","messageId":"138","endLine":10,"endColumn":64},{"ruleId":"135","severity":1,"message":"139","line":20,"column":10,"nodeType":"137","messageId":"138","endLine":20,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":66,"column":4,"nodeType":"142","endLine":66,"endColumn":10,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"141","line":78,"column":4,"nodeType":"142","endLine":78,"endColumn":10,"suggestions":"144"},{"ruleId":"140","severity":1,"message":"141","line":21,"column":8,"nodeType":"142","endLine":21,"endColumn":14,"suggestions":"145"},{"ruleId":"140","severity":1,"message":"146","line":70,"column":8,"nodeType":"142","endLine":70,"endColumn":14,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"148","line":80,"column":8,"nodeType":"142","endLine":80,"endColumn":41,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":80,"column":9,"nodeType":"151","endLine":80,"endColumn":40},{"ruleId":"135","severity":1,"message":"152","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"153","line":3,"column":20,"nodeType":"137","messageId":"138","endLine":3,"endColumn":25},{"ruleId":"135","severity":1,"message":"154","line":9,"column":10,"nodeType":"137","messageId":"138","endLine":9,"endColumn":19},{"ruleId":"135","severity":1,"message":"155","line":4,"column":34,"nodeType":"137","messageId":"138","endLine":4,"endColumn":40},{"ruleId":"140","severity":1,"message":"156","line":98,"column":8,"nodeType":"142","endLine":98,"endColumn":33,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":57,"column":83,"nodeType":"160","endLine":57,"endColumn":110},{"ruleId":"140","severity":1,"message":"146","line":39,"column":8,"nodeType":"142","endLine":39,"endColumn":16,"suggestions":"161"},{"ruleId":"140","severity":1,"message":"148","line":41,"column":8,"nodeType":"142","endLine":41,"endColumn":41,"suggestions":"162"},{"ruleId":"140","severity":1,"message":"150","line":41,"column":9,"nodeType":"151","endLine":41,"endColumn":40},{"ruleId":"140","severity":1,"message":"163","line":24,"column":8,"nodeType":"142","endLine":24,"endColumn":21,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"165","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":13},{"ruleId":"135","severity":1,"message":"166","line":4,"column":10,"nodeType":"137","messageId":"138","endLine":4,"endColumn":19},{"ruleId":"140","severity":1,"message":"167","line":33,"column":8,"nodeType":"142","endLine":33,"endColumn":10,"suggestions":"168"},{"ruleId":"158","severity":1,"message":"159","line":8,"column":83,"nodeType":"160","endLine":8,"endColumn":106},{"ruleId":"135","severity":1,"message":"169","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":20},{"ruleId":"140","severity":1,"message":"170","line":86,"column":8,"nodeType":"142","endLine":86,"endColumn":10,"suggestions":"171"},{"ruleId":"140","severity":1,"message":"148","line":89,"column":8,"nodeType":"142","endLine":89,"endColumn":41,"suggestions":"172"},{"ruleId":"140","severity":1,"message":"150","line":89,"column":9,"nodeType":"151","endLine":89,"endColumn":40},{"ruleId":"140","severity":1,"message":"146","line":94,"column":8,"nodeType":"142","endLine":94,"endColumn":18,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'verifying' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["176"],["177"],["178"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'useEffect' is defined but never used.","'Label' is defined but never used.","'propTypes' is defined but never used.","'faPray' is defined but never used.","React Hook useEffect has a missing dependency: 'checkIfUserVotedThisPost'. Either include it or remove the dependency array.",["181"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["182"],["183"],"React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["184"],"'Row' is defined but never used.","'useStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllTopics'. Either include it or remove the dependency array.",["185"],"'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["186"],["187"],["188"],"no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"189","fix":"191"},{"desc":"189","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"195","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"195","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [history, user]",{"range":"211","text":"212"},{"range":"213","text":"212"},{"range":"214","text":"212"},"Update the dependencies array to be: [getComments, user]",{"range":"215","text":"216"},"Update the dependencies array to be: [getPosts]",{"range":"217","text":"218"},"Update the dependencies array to be: [user, totalVote, postId, checkIfUserVotedThisPost]",{"range":"219","text":"220"},"Update the dependencies array to be: [getComments, postId]",{"range":"221","text":"222"},{"range":"223","text":"218"},"Update the dependencies array to be: [history, props.modal, user]",{"range":"224","text":"225"},"Update the dependencies array to be: [getAllTopics]",{"range":"226","text":"227"},"Update the dependencies array to be: [getUser]",{"range":"228","text":"229"},{"range":"230","text":"218"},"Update the dependencies array to be: [getComments, user?.id]",{"range":"231","text":"232"},[1889,1895],"[history, user]",[2219,2225],[701,707],[2306,2312],"[getComments, user]",[2532,2565],"[getPosts]",[3247,3272],"[user, totalVote, postId, checkIfUserVotedThisPost]",[1288,1296],"[getComments, postId]",[1612,1645],[839,852],"[history, props.modal, user]",[880,882],"[getAllTopics]",[2730,2732],"[getUser]",[2783,2816],[2909,2919],"[getComments, user?.id]"]